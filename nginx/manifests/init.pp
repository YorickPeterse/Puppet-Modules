##
# Class: nginx
#
# The nginx class is used to install Nginx on Arch Linux systems.
#
# == Created Files & Directories
#
# * $root/conf/virtual_hosts/
# * $root/conf/includes/
# * $root/conf/includes/php
# * $root/conf/includes/gzip
# * $root/conf/fastcgi_params (!)
# * $root/conf/nginx.conf (!)
#
# Files marked with (!) indicate that they'll overwrite files provided by the
# Arch linux package. All the .default files generated by Nginx are also nuked
# as they're totally useless when managing Nginx via Puppet.
#
# == Parameters
#
# [*ensure*]
#   Sets the state of the Nginx package (installed, present, etc).
#
# [*php_fpm_server*]
#   A string containing the IP and port number of the PHP FPM server, set to
#   127.0.0.1:9000 by default.
#
# [*user*]
#   The user to run Nginx as, set to "http" by default.
#
# [*group*]
#   The group to run Nginx as, set to "http" by default.
#
# [*workers*]
#   A number that indicates the amount of Nginx workers to run, set to 4 by
#   default.
#
# [*daemon*]
#   Boolean that indicates whether or not the Nginx process should be
#   daemonized, set to true by default.
#
# [*root*]
#   The root directory for all Nginx files, set to /etc/nginx by default.
#
# [*includes*]
#   Path to the directory containing general includes such as the Gzip and
#   PHP FPM configuration files.
#
# [*hosts*]
#   Directory that will contain all the enabled virtual hosts, set to
#   $root/conf/includes by default.
#
# [*error_log*]
#   Path to the file to log errros to, set to
#   /var/log/nginx_error.log by default.
#
# [*pid*]
#   Path to the Nginx pid, set to /var/run/nginx.pid by default.
#
# [*connections*]
#   The amount of worker connections to use, set to 2048 by default.
#
# == Example
#
#   class { 'nginx':
#     user   => 'www-data',
#     group  => 'www-data',
#     daemon => false
#   }
#
class nginx(
  $php_fpm_server = '127.0.0.1:9000',
  $user           = 'http',
  $group          = 'http',
  $workers        = 4,
  $daemon         = true,
  $root           = '/etc/nginx',
  $includes       = "$root/conf/includes",
  $hosts          = "$root/conf/virtual_hosts",
  $error_log      = "/var/log/nginx_error.log",
  $pid            = "/var/run/nginx.pid",
  $connections    = 2048,
  $ensure         = present,
) {
  $conf            = "$root/conf/nginx.conf"
  $fastcgi_params  = "$root/conf/fastcgi_params"
  $php_fpm_include = "$includes/php"
  $gzip_include    = "$includes/gzip"

  # Would be nice if Nginx is actually installed.
  package { 'nginx':
    ensure => $ensure,
    notify => Exec['delete-defaults'],
  }

  user { $user:
    ensure  => present,
    shell   => '/bin/false',
    require => Package['nginx'],
  }

  file { $root:
    ensure  => directory,
    owner   => $user,
    group   => $group,
    mode    => 0644,
    recurse => true,
    require => User[$user],
  }

  # Directory containing various includes such as a PHP config for using Nginx
  # with PHP FPM.
  file { $includes:
    ensure  => directory,
    owner   => $user,
    group   => $group,
    mode    => 0644,
    require => User[$user],
  }

  # Directory containing all the hosts
  file { $hosts:
    ensure  => directory,
    owner   => $user,
    group   => $group,
    mode    => 0644,
    require => User[$user],
  }

  # Main Nginx configuration file
  file { $conf:
    ensure  => present,
    mode    => 0644,
    owner   => $user,
    group   => $group,
    require => File[$root],
    content => template('nginx/nginx.erb'),
  }

  # Configuration file containing the FastCGI parameters.
  file { $fastcgi_params:
    ensure  => present,
    mode    => 0644,
    owner   => $user,
    group   => $group,
    require => File[$root],
    content => template('nginx/fastcgi_params.erb'),
  }

  # Configuration file for PHP FPM.
  file { $php_fpm_include:
    ensure  => present,
    mode    => 0644,
    owner   => $user,
    group   => $group,
    require => File[$includes],
    content => template('nginx/includes/php.erb'),
  }

  # Configuration file for Gzip
  file { $gzip_include:
    ensure  => present,
    mode    => 0644,
    owner   => $user,
    group   => $group,
    require => File[$includes],
    content => template('nginx/includes/gzip.erb'),
  }

  exec { 'reload-nginx':
    command     => '/usr/sbin/rc.d reload nginx',
    refreshonly => true,
  }

  # Deletes all the .default files.
  exec { 'delete-defaults':
    command => "/usr/bin/find $root/conf -name '*.default' -delete"
  }
}
